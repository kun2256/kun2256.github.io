[{"title":"贪心","date":"2024-08-13T09:04:43.000Z","url":"/2024/08/13/%E8%B4%AA%E5%BF%83/","tags":[["algorithm","/tags/algorithm/"]],"categories":[[" ",""]],"content":"avarice贪心定义 在对问题求解时，总是做出在当前看来是最好的选择。也就是说不从整体最优上考虑，而是在某种意义上求局部最优解，每次局部都是最优解则得到整体最优解 注意 不是对所有问题都能得到最优解，关键是贪心策略的选择 贪心算法的前提：局部最优解一定能导致全局最优解，且每次选择不会影响后续的选择 贪心的过程 建立模型来描述问题； 把求解的问题分成若干个子问题； 对每一子问题求解，得到子问题的局部最优解； 把子问题的解局部最优解合成原来解问题的一个解； 例题讲解活动选择原题链接 answer 贪心策略：优先选择结束时间最早的活动。这样可以为后续活动留出更多的时间。 "},{"title":"递归和递推","date":"2024-08-06T07:40:47.000Z","url":"/2024/08/06/%E9%80%92%E5%BD%92%E5%92%8C%E9%80%92%E6%8E%A8/","tags":[["algorithm","/tags/algorithm/"]],"categories":[[" ",""]],"content":"recursion递归和递推递归 从问题的最终目标出发，逐渐将复杂问题化为简单问题，最终求得问题。是逆向的 递推 从简单问题出发，一步步的向前发展，最终求得问题。是正向的。 差别 递归中问题的n 要求是计算之前就知道。而递推可以在计算中确定，不要求计算前就知道n 。 从程序上看，递归表现为自己调用自己，递推则没有这样的形式。 一般来说，递推的效率高于递归（当然是递推可以计算的情况下） 递归调用函数,浪费空间,并且递归太深容易造成堆栈的溢出 一般用递归考虑问题，然后用非递归方式编写。 例题讲解猴子吃桃原题链接 题目描述 猴子吃桃子问题：猴子第一天摘下若干个桃子，当即吃了一半还不过瘾，又多吃了一个；第二天又将剩下的桃子吃掉一半又多吃了一个；以后每天早上都吃了前一天剩下的一半零一个。到了第十天想再吃时，见只剩下一个桃子，求第一天共摘了多少个桃子？ 输入 无 输出 一个整数，第一天共有多少个桃子。 answer 通过递归思路求得第一天为n个桃，之后每一天吃一半加一个，当第十天的时候则剩只一个，共经过9天为9次，后一天都是前一天 x&#x2F;2 - 1 个，则前一天都是后一天 (x+1) * 2 个，为 2x + 2 个。 理清思路用递推来编写则为，一个变量x初始为1，经过9次计算 2x + 2 得到最终答案第一天的桃子数 过河卒原题链接 answer "},{"title":"高精度","date":"2024-08-01T06:04:43.000Z","url":"/2024/08/01/%E9%AB%98%E7%B2%BE%E5%BA%A6/","tags":[["algorithm","/tags/algorithm/"]],"categories":[[" ",""]],"content":"high-precision高精度加法加法原理 从右向左，逐位相加； 从右向左，逐位进位； 思路 用两个字符串读入高精度整数； 由于要从右向左计算，从右向左进位， 因此将每一位逆序存入2个整数数组； 从左向右逐位做计算，逐位进位； 逆序输出计算结果； 例题讲解原题链接 题目描述 计算 a + b 的值，a,b 皆为不超过240 位的非负整数。 输入 两个正整数，每行一个。 输出 一个数，代表两个整数的和。 answer 高精度减法思路 判断正负，如果 s1 &lt; s2 ，结果为负，交互s1 s2 将两个字符串，逆序存入2个整数输出 从左至右，逐位相减，不够借位 从右向左，逆序输出 source code 高精度乘法思路 将两个字符串逆序存入整数数组 循环数组 a 每一位，用 a[i] 乘以 b[j] 结果错位加到 c [i+j] 这一位上 逆序输出 高精度除法思路 模拟除法运算过程，不断重复借位除以小数位，用n限制小数位 "},{"title":"string","date":"2024-08-01T06:02:11.000Z","url":"/2024/08/01/string/","tags":[["algorithm","/tags/algorithm/"]],"categories":[[" ",""]],"content":"stringstring 和 char s[ ] 的区别 字符数组本质还是数组，因此长度固定；string 可以理解为长度不限的字符串 字符数组的系统定义的函数过少，导致操作不万便：string集成大量的系统函数，方便操作 字符数组由于本质是数组，因此不能进行比较运算以及 ＋ 运算；string可以直接做比较 string 的读入和遍历 getline(cin,s) 读入一个字符串（直到换行），可以含空格 cin 读入一个字符串，不能含空格 s.size() 求字符串s的长度 s[下标i] 获取字符串的某个下标对应 string “+” 用法 string 比较 string 函数 函数 描述 find(子串substr) 返回子字符串第一次出现的下标，没有则返回-1 find(substr,x) 从下标 x 开始查找子字符串，返回第一次出现的下标，没有则返回-1 substr(开始下标i,子串长度len) 从下标 i 截取 len 长的子字符串 substr(开始下标i) 从下标 i 开始截取子字符串到最后 earse(开始下标i,长度len) 删除从下标 i 开始 len 个字符 earse(开始下标i) 删除从下标i开始后面所有的字符 insert(插入下标i,插入字符串s) 从下标 i 插入字符串s replace(开始下标i,长度len,替换字符str) 从下标 i 开始替换 len 个字符为 str "},{"title":"进制转换","date":"2024-06-08T11:51:00.000Z","url":"/2024/06/08/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/","tags":[["algorithm","/tags/algorithm/"]],"categories":[[" ",""]],"content":"进制转换本章介绍常见4个进制之间的转换，附带思路和源码 注意⚠️：源码转换存入字符串后，很多都是倒序的，需要倒序输出 二进制转其他二进制转八进制思路：从最低位开始，每三位的值汇总相加存入字符串 Source code 二进制转十六进制思路：和八进制类似，但是四位汇总相加，且要判断大于十则转换为字母ABCDEF Source code 二进制转十进制思路：将每一位乘以进制数的位次方数，值相加 Source code 十进制转其他十进制转其他进制方法都是相同的 思路：不断将十进制取模对应的进制数，并判断大于十则转换成字母，存入字符串，再把十进制除以对应的进制数 Source code 八进制转其他八进制转二进制思路：将八进制的每一位拆解成对应的3位二进制存入字符串 注意⚠️：输出时，记得越过前导0 Source code 八进制转十进制思路：将八进制的每一位乘以进制数的位次方数，再把值相加 Source code 八进制转十六进制八进制无法直接转十六进制，需要先转为十进制或二进制，再转为十六进制 十六进制转其他十六进制转二进制思路：和八进制类似，不过是将一位拆解成四位二进制数，大于十的字母注意转换成整数型的数字 注意⚠️：输出时，记得越过前导0 Source code 十六进制转八进制十六进制无法直接转为八进制，需要先转为二进制或十进制，再转为八进制 十六进制转十进制思路：将十六进制的每一位乘以进制数的位次方数，再把值相加 Source code "},{"title":"C1--第三讲","date":"2024-06-08T08:03:25.000Z","url":"/2024/06/08/C1-%E7%AC%AC%E4%B8%89%E8%AE%B2/","tags":[["class","/tags/class/"]],"categories":[[" ",""]],"content":"第三节课导读整除和取模 成绩测评机 不同的数据类型的区别 除法运算 除法结果是整除，小数部分会舍去，获取余数使用 % 取模符号 取数位一个两位数n 成绩测评机很多算法比赛有专门的程序测评工具，能够根据预留的若干组数据，来对程序测试和评分 原理对你的程序运行测试，输入用例数据1获得测试输出1，如果根据你的程序用例输出1和测试输出1完全相等则得分。必须完全相等，多一个空格都不行。通过的用例越多，则得分越高。通过所有用例程序才是正确的。 英文 简写 中文 Pending 正在等待 Compiling 正在编译 Accepted AC 通过评测 Wrong answer WA 答案错误 Compile Error CE 编译错误 做题步骤快速读题 –&gt; 梳理概念 –&gt; 确定输入 –&gt; 确定输出 –&gt; 确定算法 –&gt; 编写程序 –&gt; 测试程序 –&gt; 提交程序 变量类型的区别int标准整数型。4个字节，一个字节8位，可以保存2^32的值，因为还有负数的存在，所以可保存值的范围为 -2^31 ~ 2^31-1 &#x3D;&#x3D;&#x3D;&gt; -2147483648 ~ 2147483647 一般只保存9位以内的整数 long long长整数型。8个字节，一个字节8位，可以保存2^64的值，因为还有负数的存在，所以可保存值的范围为 -2^63 ~ 2^63-1 &#x3D;&#x3D;&#x3D;&gt; -9223372036854775808 ~ 9223372036854775807 一般保存18位内的整数 double双精度浮点数。8个字节 -1.79769313486232e308 ～ 1.79769313486232e308 一般用来保存小数"},{"title":"C1--第二讲","date":"2024-06-05T11:56:25.000Z","url":"/2024/06/05/C1-%E7%AC%AC%E4%BA%8C%E8%AE%B2/","tags":[["class","/tags/class/"]],"categories":[[" ",""]],"content":"第二节课程序的存储程序经过编译：将高级语言编写的源程序转化成计算机可以执行的目标程序。 以二进制的形式存储在内存中。 内存中的数据都是以二进制形式存储的，计算机只认识0和1 运行程序时计算机将自动地并按顺序从存储器中取出指令一条一条地执行。 变量变量一个盒子，用来存放数据或者是表达式的结果。 变量是可读可写的，这也意味着它里面的数据是可以改变的 变量类型和计算机约定变量装的是什么类型的数据，比如整数、小数、字符。并根据类型约定变量所占用的内存大小。 像我们之前提到的，数据是以二进制的形式存放在内存之中的，我们的变量也是如此，当我们保存一个字符”A“在变量中时，其实是保存”A“的ascii码值在变量之中，即保存0X41在变量之中，当我们去调用时这个变量时，会读取它的值0X41，并根据它的数据类型输出，如果是字符型则输出“A”。如果是整数，则输出65。 变量名变量名只能包含数字、字母和_ 字母区分大小写 并且不能数字为开头！！！ 不能与关键字相同！！！ 同一个作用域下不能定义名字一样的变量 声明与赋值变量必须先声明才能使用！ 变量的初始化变量的声明和赋值合在一起 变量的使用输出 更新数据 参与运算 输入如果我们声明了一个变量，每次运行程序，都要不同的数值，怎么办呢？ 这个时候就要用到输入了，我们自己输入值到变量 "},{"title":"C1--第一讲","date":"2024-06-02T11:31:11.000Z","url":"/2024/06/02/C1-%E7%AC%AC%E4%B8%80%E8%AE%B2/","tags":[["class","/tags/class/"]],"categories":[[" ",""]],"content":"第一节课自我介绍立规矩讲知识 重点 自我介绍我姓欧阳，大家可以叫我欧阳老师，我主要负责c++和python课程的老师 上课的规矩 1. 老师讲课的时候大家不要随意讲话，不要随意打断老师讲课，有问题就举手 2. 上课的时候在自己位置上坐好，不可以随意走动 3. 下课要收拾好自己的电脑和桌面，爱护好设备 讲课熟悉键盘键盘主要分为数字区，字母区，和方向键。还有一些功能键，比如大小写转换，回车，shiift和删除 了解编程首先问一下大家，大家觉得什么是计算机呢。。。除了我们上课正在用的电脑、平板、手机，还有很多智能设备，比如智能手表，智能电视，扫地机器人，它们本质上都是计算机的，所以我们这个时代生活离不开计算机，我们这个时代是计算机时代 世界上第一台计算机于1946年在美国发明出来，它的名字为”ENIAC”它是由电子管组成的，所以做的特别大，占地有三四间我们这样的教室这么大，早期计算机发明出来主要是为了战争的，向第一台计算机“ENIAC”发明出来就是为了计算炮弹射击的轨道的。 到了现在，我们生活中各式各样的工作都是由计算机完成的，就好比扫地机器人，它是怎么执行扫地这种复杂的问题的呢，这都是由一个大问题，拆解成一系列小问题，一点一点解决的 大家可以看到，我们起床刷牙的话，需要怎么做呢，我们可以把刷牙这个大问题拆解成一个一个小问题来解决。同理，炒菜也是一样的，都是把一个大问题一点一点拆解成一个一个小问题来解决的 像我们编程也是一样的，首先规范定义的问题，明确我们的问题的前提，这个就是输入；通过解决问题达成的目标，这个则是输出。而解决问题的过程和思路则是我们编程中的算法 就好比炒菜，食材和厨具就是输入，烧好的菜就是输出，菜谱就是对应的算法，而炒菜的人就相当于计算机的角色。 程序框架头文件、命名空间、主程序、结束标注 总结熟悉键盘三个区：字母区、数字区、方向键四个功能键：大小写转换键、回车键、shift键、删除键 了解编程电脑、平板、手机、智能手表、扫地机器人等等本质上都是计算机。我们的生活离不开计算机，所以这是属于计算机的时代规范问题会有输入和输出，输入：问题的前提、输出：解决问题的目标算法：解决问题的思路。语言：交给计算机怎么执行处理问题。 程序框架头文件命名空间主程序：程序算法写在这个里面，你写什么计算机做什么，这个过程就叫编程结束标注 缩进：能增加代码可读性，一个优秀程序员的基本素养 输出：cout：标准输出流&lt;&lt;：分隔符号“Hello,world”：字符串输出的内容Endl：换行效果;：代码语句结束必须要分号结尾 顺序结构代码都是按照由上到下、先后顺序，依次执行的算术表达式和我们学到的算式是一样的"},{"title":"通知","date":"2024-05-21T07:42:50.000Z","url":"/2024/05/21/%E9%80%9A%E7%9F%A5/","tags":[["importance","/tags/importance/"]],"categories":[[" ",""]],"content":"很不幸，前段时间电脑系统损坏，本地博客配置文件没有备份，导致网站旧数据丢失，现重新做一个网站重新开始（这次必须好好备份）Unfortunately, some time ago, the computer system was damaged, the local blog configuration file was not backed up, resulting in the loss of the old data of the website, now make a new website to start again (this time must be a good backup)."},{"title":"class","date":"2024-06-06T08:47:01.000Z","url":"/class/index.html","categories":[[" ",""]]},{"title":"algorithm","date":"2024-06-08T11:49:28.000Z","url":"/algorithm/index.html","categories":[[" ",""]]},{"title":"knowledge","date":"2024-05-21T09:21:44.000Z","url":"/knowledge/index.html","categories":[[" ",""]]},{"title":"importance","date":"2024-05-21T09:23:22.000Z","url":"/importance/index.html","categories":[[" ",""]]},{"title":"search","date":"2024-05-21T06:20:28.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2024-05-21T09:14:06.000Z","url":"/tags/index.html","categories":[[" ",""]],"content":"重要通知知识classalgorithm"}]